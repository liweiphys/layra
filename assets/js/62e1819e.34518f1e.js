"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[514],{947:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/condition-loop-36d89edee9d619333bd1ad57f0f23f22.png"},2058:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/nested-loops-42d54b7f8578c5e98f3a8e90a91a4d91.png"},4642:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/loop-execution-7c705c7dd95b9f032a1fe354044cdbd7.png"},5673:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/condition-loop-result-5c777a9993a91f62f9203f1899ef811c.png"},5894:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"work-flow/nodes/loop-node","title":"Loop Node","description":"In this section, we\'ll explore the Loop Node, which functions similarly to for and while loops in programming languages, enabling repetitive execution of workflow segments.","source":"@site/docs/work-flow/nodes/loop-node.md","sourceDirName":"work-flow/nodes","slug":"/work-flow/nodes/loop-node","permalink":"/layra/docs/work-flow/nodes/loop-node","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Condition Node","permalink":"/layra/docs/work-flow/nodes/condition-node"},"next":{"title":"Code Node","permalink":"/layra/docs/work-flow/nodes/code-node"}}');var s=o(4848),t=o(8453);const l={sidebar_position:4},r="Loop Node",d={},c=[{value:"Basic Loop Logic",id:"basic-loop-logic",level:2},{value:"Count Loop Configuration",id:"count-loop-configuration",level:2},{value:"Example: Simple Counter",id:"example-simple-counter",level:3},{value:"Condition Loop Configuration",id:"condition-loop-configuration",level:2},{value:"Example: Countdown Loop",id:"example-countdown-loop",level:3},{value:"Practical Example: Processing Items",id:"practical-example-processing-items",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Multi-Level Nested Loops",id:"multi-level-nested-loops",level:3},{value:"Dynamic Loop Control",id:"dynamic-loop-control",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"loop-node",children:"Loop Node"})}),"\n",(0,s.jsxs)(n.p,{children:["In this section, we'll explore the ",(0,s.jsx)(n.strong,{children:"Loop Node"}),", which functions similarly to ",(0,s.jsx)(n.code,{children:"for"})," and ",(0,s.jsx)(n.code,{children:"while"})," loops in programming languages, enabling repetitive execution of workflow segments."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"basic-loop-logic",children:"Basic Loop Logic"}),"\n",(0,s.jsxs)(n.p,{children:["Start by adding a Start Node to your workflow, then connect it to a Loop Node. Unlike other nodes, the Loop Node requires at least one child node to form its ",(0,s.jsx)(n.strong,{children:"loop body"}),". This body will execute repeatedly based on your loop configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Loop Node Structure",src:o(5978).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsxs)(n.p,{children:["Select the Loop Node to reveal its configuration panel. You'll find the ",(0,s.jsx)(n.strong,{children:"Loop Settings"})," section with two loop types:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Count Loop"}),(0,s.jsx)(n.br,{}),"\n","Executes a fixed number of iterations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Condition Loop"}),(0,s.jsx)(n.br,{}),"\n","Executes while a break condition remains false"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"NO TESTING OPTION",type:"note",children:(0,s.jsxs)(n.p,{children:["Loop Nodes lack a ",(0,s.jsx)(n.strong,{children:"Run Test"})," button for ",(0,s.jsx)(n.strong,{children:"node-level testing"})," since they require a loop body to function meaningfully."]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"count-loop-configuration",children:"Count Loop Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["When selecting ",(0,s.jsx)(n.strong,{children:"Count"})," as your loop type:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set the ",(0,s.jsx)(n.strong,{children:"Max Count"})," field to determine iterations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-simple-counter",children:"Example: Simple Counter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Max Count = 3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This configuration will execute the loop body exactly three times, with ",(0,s.jsx)(n.code,{children:"Global Loop"})," values: 1, 2, 3."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Loop Execution",src:o(4642).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"condition-loop-configuration",children:"Condition Loop Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["When selecting ",(0,s.jsx)(n.strong,{children:"Condition"})," as your loop type:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Define your ",(0,s.jsx)(n.strong,{children:"Break Condition"})," using a Python expression"]}),"\n",(0,s.jsxs)(n.li,{children:["The loop continues while this condition evaluates to ",(0,s.jsx)(n.code,{children:"False"})]}),"\n",(0,s.jsxs)(n.li,{children:["Breaks immediately when condition becomes ",(0,s.jsx)(n.code,{children:"True"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-countdown-loop",children:"Example: Countdown Loop"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Global Variable\ncurrent_count = 1\n\n# Break Condition\ncurrent_count > 3\n\n# Code Editor\nprint("current_count:", current_count)\ncurrent_count += 1\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The loop will execute while ",(0,s.jsx)(n.code,{children:"current_count <= 3"}),", stopping when it reaches 4."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Condition Loop Execution",src:o(9006).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"practical-example-processing-items",children:"Practical Example: Processing Items"}),"\n",(0,s.jsxs)(n.p,{children:["We'll create a workflow that processes elements in a list. This simple example converts all string elements in a list to uppercase. The method involves sequentially retrieving items from the original list using ",(0,s.jsx)(n.code,{children:"pop()"}),", converting them to uppercase, and appending them to a new list:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Initialize global variables"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'items = ["apple", "banana", "cherry"]\nprocessed_items = []\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configure Loop Node"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loop Type"}),": Condition"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Break Condition"}),": ",(0,s.jsx)(n.code,{children:"len(items) == 0"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Condition Loop",src:o(947).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Loop body (Code Node)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Retrieve current item\ncurrent_item = items.pop()  \n\n# Process item (convert to uppercase)\nprocessed_items.append(current_item.upper())  \n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Post-loop processing (Code Node)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Output results\nprint(processed_items)  \n# Output: ['APPLE', 'BANANA', 'CHERRY']\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Condition Loop Result",src:o(5673).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pedagogical Note"}),": While this could be achieved with a one-liner like ",(0,s.jsx)(n.code,{children:"[x.upper() for x in items]"}),", this example intentionally demonstrates fundamental workflow concepts. The simplicity allows focus on core mechanics, which can be extended to complex real-world scenarios."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"multi-level-nested-loops",children:"Multi-Level Nested Loops"}),"\n",(0,s.jsx)(n.p,{children:"Loop nodes support deep nesting hierarchies, enabling complex multi-layered structures similar to programming languages:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Nested Loops",src:o(2058).A+"",width:"3024",height:"1964"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Supports unlimited nesting levels for intricate workflows"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-loop-control",children:"Dynamic Loop Control"}),"\n",(0,s.jsx)(n.p,{children:"Control loop execution dynamically using Python expressions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Break condition\nerror_detected or iteration_count > max_retries\n\n# Continue condition\nresponse['has_more'] and processed_items < 100\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.admonition,{title:"DEBUGGING TIPS",type:"tip",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Set breakpoints in nested child nodes"}),"\n",(0,s.jsx)(n.li,{children:"Constrain maximum iterations during testing"}),"\n",(0,s.jsx)(n.li,{children:"Validate exit conditions at each nesting level"}),"\n"]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["Now that you understand looping, explore combining Loop Nodes with ",(0,s.jsx)(n.strong,{children:"Code Node"})," for complex flow control"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5978:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/loop-node-structure-2a423aaede09d0d3376dff6a67185b49.png"},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var i=o(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},9006:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/condition-loop-execution-8c5589d365eea67ca875bbe6032bde34.png"}}]);