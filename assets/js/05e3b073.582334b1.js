"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[698],{2441:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"work-flow/nodes/llm-node","title":"LLM Node","description":"The LLM Node is the core component for integrating large language models into your workflows. It provides flexible interfaces to configure system prompts, inputs, and outputs while enabling seamless interaction with global variables, knowledge bases (RAG), external function calls (including MCP), and other advanced features.","source":"@site/docs/work-flow/nodes/llm-node.md","sourceDirName":"work-flow/nodes","slug":"/work-flow/nodes/llm-node","permalink":"/layra/docs/work-flow/nodes/llm-node","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Code Node","permalink":"/layra/docs/work-flow/nodes/code-node"},"next":{"title":"Workflow","permalink":"/layra/docs/work-flow/workflow"}}');var t=i(4848),o=i(8453);const r={sidebar_position:6},l="LLM Node",a={},d=[{value:"Core Configuration Sections",id:"core-configuration-sections",level:2},{value:"1. Prompt Configuration",id:"1-prompt-configuration",level:3},{value:"2. Input Configuration",id:"2-input-configuration",level:3},{value:"Predefined Input",id:"predefined-input",level:4},{value:"ChatFlow User Input",id:"chatflow-user-input",level:4},{value:"3. LLM Response",id:"3-llm-response",level:3},{value:"4. ChatFlow Controls",id:"4-chatflow-controls",level:3},{value:"Three checkboxes governing conversation flow:",id:"three-checkboxes-governing-conversation-flow",level:4},{value:"5. MCP Support",id:"5-mcp-support",level:3},{value:"ChatFlow Mechanics",id:"chatflow-mechanics",level:2},{value:"Basic ChatFlow Example",id:"basic-chatflow-example",level:3},{value:"Conversation Memory Setup",id:"conversation-memory-setup",level:3},{value:"Variable Configuration Guide",id:"variable-configuration-guide",level:2},{value:"1. Basic Prompt with Variables",id:"1-basic-prompt-with-variables",level:3},{value:"2. Interactive User Input",id:"2-interactive-user-input",level:3},{value:"3. Output Capture Methods",id:"3-output-capture-methods",level:3},{value:"3.1 JSON Output Processing",id:"31-json-output-processing",level:4},{value:"3.2 Manual Assignment",id:"32-manual-assignment",level:4},{value:"Implementation Example: Web Scraping + Email Automation",id:"implementation-example-web-scraping--email-automation",level:2},{value:"1. Global Variable Configuration",id:"1-global-variable-configuration",level:3},{value:"2. Node Configuration",id:"2-node-configuration",level:3},{value:"1. Pip Dependencies Node",id:"1-pip-dependencies-node",level:4},{value:"2. Web Scraping Node",id:"2-web-scraping-node",level:4},{value:"3. User Input &amp; Email Generation Node",id:"3-user-input--email-generation-node",level:4},{value:"4. Email Sending Node",id:"4-email-sending-node",level:4},{value:"5. LLM Output Node",id:"5-llm-output-node",level:4},{value:"3. Running the Workflow",id:"3-running-the-workflow",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"llm-node",children:"LLM Node"})}),"\n",(0,t.jsx)(n.p,{children:"The LLM Node is the core component for integrating large language models into your workflows. It provides flexible interfaces to configure system prompts, inputs, and outputs while enabling seamless interaction with global variables, knowledge bases (RAG), external function calls (including MCP), and other advanced features."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"LLM Node Interface",src:i(9003).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"core-configuration-sections",children:"Core Configuration Sections"}),"\n",(0,t.jsx)(n.h3,{id:"1-prompt-configuration",children:"1. Prompt Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Defines the system prompt guiding the LLM's behavior. Supports dynamic variable insertion using ",(0,t.jsx)(n.code,{children:"{{variable}}"})," syntax."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format"}),": Plain text with optional variable placeholders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Variable Handling"}),": Automatically replaces ",(0,t.jsx)(n.code,{children:"{{variable}}"})," with values from ",(0,t.jsx)(n.strong,{children:"Global Variables"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Settings"})," (via ",(0,t.jsx)(n.strong,{children:"More Settings"}),"):","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Model selection"}),"\n",(0,t.jsx)(n.li,{children:"LLM parameters (temperature, max tokens, top-P, etc.)"}),"\n",(0,t.jsxs)(n.li,{children:["Knowledge base RAG integration",(0,t.jsx)(n.br,{}),"\n",(0,t.jsxs)(n.em,{children:["Refer to ",(0,t.jsx)(n.a,{href:"../../RAG-Chat",children:"RAG-Chat"})," for implementation details."]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-input-configuration",children:"2. Input Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Determines the LLM's input source with two operational modes:"}),"\n",(0,t.jsx)(n.h4,{id:"predefined-input",children:"Predefined Input"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed input defined during workflow design"}),"\n",(0,t.jsxs)(n.li,{children:["Supports ",(0,t.jsx)(n.code,{children:"{{variable}}"})," syntax for ",(0,t.jsx)(n.strong,{children:"Global Variables"})]}),"\n",(0,t.jsx)(n.li,{children:"Executes workflow without user interruption"}),"\n",(0,t.jsxs)(n.li,{children:["Activated via ",(0,t.jsx)(n.code,{children:"Change Input Style"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"chatflow-user-input",children:"ChatFlow User Input"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pauses workflow execution at this node"}),"\n",(0,t.jsxs)(n.li,{children:["Presents interactive dialog for real-time user input ",(0,t.jsx)(n.strong,{children:"(Human-In-The-Loop)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Activated via ",(0,t.jsx)(n.code,{children:"Change Input Style"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-llm-response",children:"3. LLM Response"}),"\n",(0,t.jsx)(n.p,{children:"Processes and displays model outputs with these features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Markdown Rendering"}),": Formatted display including URL/base64 images"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSON Extraction"}),":\nAutomatically detects and extracts JSON objects using regex. Supports multiple JSON structures in outputs. Valid JSON pairs with ",(0,t.jsx)(n.strong,{children:"Global Variables"})," for assignment.","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Example\n{"variable": "value"} \u2192 Updates global variable\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run Test"}),": Execute node independently"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Response Assignment"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Dropdown lists all ",(0,t.jsx)(n.em,{children:"Global Variables"})]}),"\n",(0,t.jsxs)(n.li,{children:["Assigns full response to selected variable",(0,t.jsx)(n.br,{}),"\n",(0,t.jsxs)(n.em,{children:["Works parallel with ",(0,t.jsx)(n.strong,{children:"JSON Extraction"})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Variable Replacement Example",src:i(4356).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"4-chatflow-controls",children:"4. ChatFlow Controls"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"The ChatFlow module is essential in LAYRA workflows"}),", enabling you to interrupt execution at any point for manual input (e.g., activating ",(0,t.jsx)(n.code,{children:"human-in-the-loop"})," for intervention) while selectively displaying LLM outputs and hiding backend processes such as reasoning or text handling."]}),"\n",(0,t.jsx)(n.h4,{id:"three-checkboxes-governing-conversation-flow",children:"Three checkboxes governing conversation flow:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Checkbox"}),(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Dependencies"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Set As Chatflow User Input"})}),(0,t.jsx)(n.td,{children:"Marks node as user input"}),(0,t.jsx)(n.td,{children:"Auto-enables user input mode"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Set As Chatflow AI Response"})}),(0,t.jsx)(n.td,{children:"Marks node as AI output"}),(0,t.jsx)(n.td,{children:"Required for Memory feature"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Use Conversation Memory"})}),(0,t.jsx)(n.td,{children:"Maintains chat history"}),(0,t.jsx)(n.td,{children:"Requires AI Response checkbox"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["When enabling ",(0,t.jsx)(n.code,{children:"User Input"}),", ",(0,t.jsx)(n.code,{children:"AI Response"}),", ",(0,t.jsx)(n.code,{children:"Conversation Memory"}),", or ",(0,t.jsx)(n.code,{children:"MCP Support"}),", corresponding icons appear on canvas nodes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"User Input Nodes"}),":",(0,t.jsx)(n.br,{}),"\n","Enable ",(0,t.jsx)(n.code,{children:"User Input"})," to pause workflow execution and display an interactive input dialog in ChatFlow. Nodes with ",(0,t.jsx)(n.code,{children:"Predefined Input"})," run in the background using preset values. View detailed input/output via the node's ",(0,t.jsx)(n.code,{children:"LLM Response"})," and ",(0,t.jsx)(n.code,{children:"Output"})," panels."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"AI Response Nodes"}),":",(0,t.jsx)(n.br,{}),"\n","Enable ",(0,t.jsx)(n.code,{children:"AI Response"})," to display model outputs in the ChatFlow dialog. Disabled nodes run in the background \u2013 check ",(0,t.jsx)(n.code,{children:"LLM Response"})," and ",(0,t.jsx)(n.code,{children:"Output"})," panels for details."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Conversation Memory"}),":",(0,t.jsx)(n.br,{}),"\n","Enable to retain chat history across sessions. Disabling treats each ",(0,t.jsx)(n.code,{children:"User Input"})," as a new conversation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Access historical ChatFlow runs via the top-right ",(0,t.jsx)(n.code,{children:"Chatflow History"})," button. This only includes conversations where ",(0,t.jsx)(n.code,{children:"User Input"}),"/",(0,t.jsx)(n.code,{children:"AI Response"})," features were enabled."]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{title:"CHATFLOW LOGIC",type:"important",children:[(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"User Input"})," node must be followed by a corresponding ",(0,t.jsx)(n.code,{children:"AI Response"})," node to maintain conversational flow. The system will flag errors for:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Consecutive ",(0,t.jsx)(n.code,{children:"User Input"})," nodes"]}),"\n",(0,t.jsxs)(n.li,{children:["Consecutive ",(0,t.jsx)(n.code,{children:"AI Response"})," nodes"]}),"\n"]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Chat Flow",src:i(4041).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"5-mcp-support",children:"5. MCP Support"}),"\n",(0,t.jsxs)(n.p,{children:["Click the ",(0,t.jsx)(n.code,{children:"MCP Tools"})," button in the top-right corner of the ChatFlow configuration panel to set up MCP servers. LAYRA supports SSE-streaming MCP services with simple configuration:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Enter ",(0,t.jsx)(n.code,{children:"MCP Name"})," and click ",(0,t.jsx)(n.code,{children:"Click to Add"})," to create server"]}),"\n",(0,t.jsxs)(n.li,{children:["Input SSE endpoint URL in ",(0,t.jsx)(n.code,{children:"MCP Server Url"})]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"Refresh Tools"})," to load available tools"]}),"\n",(0,t.jsxs)(n.li,{children:["Activate services:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Toggle ",(0,t.jsx)(n.code,{children:"Use This MCP Tools"})," for full service activation"]}),"\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.code,{children:"Use Function Tool"})," per tool for granular control"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Once activated, LLMs automatically invoke tools during conversations. Multiple MCP servers can be configured per LLM node."}),"\n",(0,t.jsx)(n.admonition,{title:"RECOMMENDATION",type:"tip",children:(0,t.jsxs)(n.p,{children:["We recommend disabling the LLM's ",(0,t.jsx)(n.code,{children:"thinking mode"})," when using MCP, as the backend activates built-in reasoning modules during tool invocation."]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"LLM Node MCP",src:i(7923).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsxs)(n.admonition,{title:"MCP SERVER LOCAL DEPLOYMENT NOTE",type:"important",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"When using a locally hosted MCP server:"})}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Set the ",(0,t.jsx)(n.code,{children:"MCP Server Url"})," to your machine's ",(0,t.jsx)(n.strong,{children:"Internal IP Address"})," (e.g., ",(0,t.jsx)(n.code,{children:"http://192.168.1.5:8000/sse"})," or ",(0,t.jsx)(n.code,{children:"http://10.0.0.2:5000/sse"}),"), ",(0,t.jsx)(n.strong,{children:"not"})," ",(0,t.jsx)(n.code,{children:"localhost:5000/sse"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Firewall Configuration:"})," If you're using a firewall (e.g., ",(0,t.jsx)(n.code,{children:"ufw"}),"), allow Docker network access ",(0,t.jsx)(n.strong,{children:"to"})," your MCP server port."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Binding:"})," Ensure your MCP service ",(0,t.jsxs)(n.strong,{children:["binds to ",(0,t.jsx)(n.code,{children:"0.0.0.0"})]})," (all interfaces), ",(0,t.jsx)(n.strong,{children:"not"})," ",(0,t.jsx)(n.code,{children:"127.0.0.1"})," (localhost only)."]}),"\n"]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"chatflow-mechanics",children:"ChatFlow Mechanics"}),"\n",(0,t.jsx)(n.p,{children:"We demonstrate ChatFlow Mechanics through a simple workflow containing three LLM nodes:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The first LLM node handles user input"}),"\n",(0,t.jsx)(n.li,{children:"The second translates the first node's English output into Chinese"}),"\n",(0,t.jsx)(n.li,{children:"The third node outputs the second node's Chinese translation"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In the ChatFlow interface, only the user's English input and final Chinese output are visible. The first node's output, third node's input, and the entire second node operate in the background."}),"\n",(0,t.jsx)(n.h3,{id:"basic-chatflow-example",children:"Basic ChatFlow Example"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Basic ChatFlow Mermaid",src:i(8396).A+"",width:"2034",height:"414"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only input/output nodes appear in the ChatFlow UI"}),"\n",(0,t.jsx)(n.li,{children:"Intermediate processing remains hidden"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"conversation-memory-setup",children:"Conversation Memory Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Paired input/output nodes"}),"\n",(0,t.jsx)(n.li,{children:'"Use Conversation Memory" enabled on output nodes'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Validation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Blocks consecutive input nodes"}),"\n",(0,t.jsx)(n.li,{children:"Prevents orphaned output nodes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This example also has the memory feature enabled:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Basic ChatFlow Example",src:i(5697).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"variable-configuration-guide",children:"Variable Configuration Guide"}),"\n",(0,t.jsx)(n.h3,{id:"1-basic-prompt-with-variables",children:"1. Basic Prompt with Variables"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create global variable: ",(0,t.jsx)(n.code,{children:'topic = "climate change"'})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure prompt:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"As a science expert, explain {{topic}} in simple terms.\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Set input style: ",(0,t.jsx)(n.strong,{children:"Predefined Input"})," (",(0,t.jsx)(n.code,{children:"What are key impacts?"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-interactive-user-input",children:"2. Interactive User Input"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Enable ",(0,t.jsx)(n.strong,{children:"Set As Chatflow User Input"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure prompt:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"As a travel assistant, always provide helpful responses.\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-output-capture-methods",children:"3. Output Capture Methods"}),"\n",(0,t.jsx)(n.h4,{id:"31-json-output-processing",children:"3.1 JSON Output Processing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Prompt configuration:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'Output JSON: {destination, duration, budget}\nExample: {"destination": "Paris", "duration": 7, "budget": 2500}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["LLM output:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{ "destination": "Kyoto", "duration": 10, "budget": 3200 }\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Automatically updates variables in ",(0,t.jsx)(n.strong,{children:"Global Variables"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:'destination = "Kyoto"'})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"duration = 10"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"budget = 3200"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"32-manual-assignment",children:"3.2 Manual Assignment"}),"\n",(0,t.jsxs)(n.p,{children:["Select variable in ",(0,t.jsx)(n.code,{children:"LLM Response="})," dropdown \u2192 Full response stored"]}),"\n",(0,t.jsx)(n.admonition,{title:"Error Prevention",type:"warning",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:'"Consecutive input nodes without output"'})]}),"\n",(0,t.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:'"Output node without preceding input"'})]}),"\n",(0,t.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:'"Memory enabled without AI Response designation"'})]}),"\n",(0,t.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,t.jsxs)(n.strong,{children:['"Using ',(0,t.jsx)(n.code,{children:"Predefined Input"}),' without defining content"']})]}),"\n"]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"implementation-example-web-scraping--email-automation",children:"Implementation Example: Web Scraping + Email Automation"}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s walk through a practical example of combining ",(0,t.jsx)(n.strong,{children:"LLM nodes"})," with ",(0,t.jsx)(n.strong,{children:"code nodes"})," in a workflow to create a simple automation: scraping quotes from a website, filtering them by a user-specified theme using a large language model, and sending the selected quotes via email."]}),"\n",(0,t.jsxs)(n.p,{children:["This example involves ",(0,t.jsx)(n.strong,{children:"four functional nodes"})," plus an additional ",(0,t.jsx)(n.code,{children:"code"})," node to install required pip dependencies."]}),"\n",(0,t.jsx)(n.p,{children:"In this workflow, there is a single human intervention step: specifying the desired quote theme before the LLM generates the email content. Therefore:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.strong,{children:"email generation node"})," needs to enable the ",(0,t.jsx)(n.code,{children:"User Input"})," feature."]}),"\n",(0,t.jsxs)(n.li,{children:["Before that, we add a ",(0,t.jsx)(n.code,{children:"code"})," node to scrape a large number of quotes for the LLM to filter."]}),"\n",(0,t.jsxs)(n.li,{children:["After the LLM processes the data, another ",(0,t.jsx)(n.code,{children:"code"})," node sends the email."]}),"\n",(0,t.jsxs)(n.li,{children:["Finally, we add an LLM output node with ",(0,t.jsx)(n.code,{children:"AI Response"})," enabled at the end of the workflow to display the sent email content directly in the Chatflow for improved user experience."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Global Variable",src:i(7144).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.h3,{id:"1-global-variable-configuration",children:"1. Global Variable Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["As shown above, first define all necessary ",(0,t.jsx)(n.strong,{children:"Global Variables"}),":"]}),"\n",(0,t.jsxs)(n.p,{children:["Before proceeding, you must authorize LAYRA to send emails using an ",(0,t.jsx)(n.code,{children:"Authorization Code"}),". Refer to the ",(0,t.jsx)(n.a,{href:"./code-node",children:"Code Node Section"})," for instructions, or ask the LLM directly for guidance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'quotes_url = "https://quotes.toscrape.com" # The website to scrape quotes from\n\nquotes = "" # Initially empty; will be populated by the scraping node\n\nrecipient_name = "Your Name" # Replace with the recipient\'s name\n\nrecipient_email = "recipient@example.com" # Replace with the recipient\'s email\n\nsender_name = "LAYRA" # Replace with the sender\'s name\n\nsender_email = "sender@example.com" # Replace with the sender\'s email\n\nauthorization_code = "Your Code" # Replace with the sender\'s Authorization Code\n\nemail_subject = "" # Initially empty; generated by the LLM\n\nemail_body = "" # Initially empty; generated by the LLM\n'})}),"\n",(0,t.jsx)(n.admonition,{title:"Best Practice",type:"tip",children:(0,t.jsxs)(n.p,{children:["Often, you do not need to define all ",(0,t.jsx)(n.code,{children:"Global Variables"})," at the start. Instead, add or remove variables as your workflow logic evolves."]})}),"\n",(0,t.jsx)(n.h3,{id:"2-node-configuration",children:"2. Node Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"1-pip-dependencies-node",children:"1. Pip Dependencies Node"}),"\n",(0,t.jsxs)(n.p,{children:["Modify the ",(0,t.jsx)(n.code,{children:"Pip Dependencies"})," field to include:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"beautifulsoup4\nrequests == 2.26.0\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you are located in China and need to accelerate downloads, set a pip mirror:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Mirror Url = https://pypi.tuna.tsinghua.edu.cn/simple\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Pip Node",src:i(9376).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.admonition,{title:"Persisting Mirrors",type:"tip",children:(0,t.jsxs)(n.p,{children:["Check ",(0,t.jsx)(n.code,{children:"Commit Runtime Environment"})," to persist your pip mirror and dependencies, avoiding the need for a separate pip installation node in future runs."]})}),"\n",(0,t.jsx)(n.h4,{id:"2-web-scraping-node",children:"2. Web Scraping Node"}),"\n",(0,t.jsxs)(n.p,{children:["Replace the ",(0,t.jsx)(n.code,{children:"Code Editor"})," content with the following code. This script scrapes ",(0,t.jsx)(n.strong,{children:"only the first two pages"}),", accepts ",(0,t.jsx)(n.code,{children:"quotes_url"})," as input, and stores the scraped quotes into the ",(0,t.jsx)(n.code,{children:"quotes"})," variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import requests\nfrom bs4 import BeautifulSoup\nimport json\n\ndef scrape_quotes_toscrape(base_url):\n    scraped_quotes = []\n\n    # Scrape only the first two pages\n    for page_num in range(1, 3):\n        url = f\"{base_url}/page/{page_num}/\"\n        print(f\"Scraping page {page_num}: {url}  \")\n\n        # Send HTTP request\n        response = requests.get(url)\n\n        # Check response status\n        if response.status_code != 200:\n            print(f\"Failed to scrape page {page_num}. Status code: {response.status_code}  \")\n            continue\n\n        # Parse HTML content\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        # Find all quote blocks\n        quotes = soup.select('div.quote')\n\n        # Extract information from each quote\n        for quote in quotes:\n            text = quote.select_one('span.text').text.strip()\n            author = quote.select_one('small.author').text.strip()\n            tags = [tag.text for tag in quote.select('a.tag')]\n\n            scraped_quotes.append({\n                'quote': text,\n                'author': author,\n                'tags': tags,\n                'page': page_num\n            })\n\n        print(f\"Page {page_num} scraped successfully. Found {len(quotes)} quotes\\n\")\n\n    # Print summary\n    print(f\"Total quotes scraped: {len(scraped_quotes)}  \")\n    return scraped_quotes\n\n# Function execution\nquotes_data = scrape_quotes_toscrape(quotes_url)\n\nfor i, item in enumerate(quotes_data):\n    quotes += f\"> {i}. {item['quote']}  \\n\"\n    quotes += f\"   - **Author**: {item['author']}  \\n\"\n    quotes += f\"   - **Tags**: {', '.join(item['tags'])}  \\n\"\n    quotes += f\"   - **Page**: {item['page']}\\n  \"\n\n# Display sample output\nprint(\"\\n### Sample quotes:  \")\nfor i, item in enumerate(quotes_data[:5], 1):\n    print(f\"> {i}. {item['quote']}  \")\n    print(f\"   - **Author**: {item['author']}  \")\n    print(f\"   - **Tags**: {', '.join(item['tags'])}  \")\n    print(f\"   - **Page**: {item['page']}\\n  \")\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Scraping Node",src:i(6096).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.h4,{id:"3-user-input--email-generation-node",children:"3. User Input & Email Generation Node"}),"\n",(0,t.jsx)(n.p,{children:"Set the LLM prompt to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'Based on the user\'s requirements, select some appropriate short quotes and output them as an email in JSON format only. Do not include any other information. The output format should be: {"email_subject": email_subject_output, "email_body": email_body_output}. The recipient is: {{recipient_name}}, and the sender is: {{sender_name}}.\n Here are all the quotes information:\n{{quotes}}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This ensures the LLM outputs a valid JSON containing ",(0,t.jsx)(n.code,{children:"email_subject"})," and ",(0,t.jsx)(n.code,{children:"email_body"}),", which LAYRA will parse and assign to the corresponding ",(0,t.jsx)(n.strong,{children:"Global Variables"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important:"})," Enable ",(0,t.jsx)(n.code,{children:"Use Chatflow User Input"})," by checking the ",(0,t.jsx)(n.code,{children:"Set As Chatflow User Input"})," box to accept user input in this node."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Input Node",src:i(9497).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.h4,{id:"4-email-sending-node",children:"4. Email Sending Node"}),"\n",(0,t.jsxs)(n.p,{children:["Replace the ",(0,t.jsx)(n.code,{children:"Code Editor"})," content with the following code to send the generated email using the specified SMTP server."]}),"\n",(0,t.jsx)(n.admonition,{title:"SMTP Server Configuration",type:"important",children:(0,t.jsx)(n.p,{children:"Replace the SMTP server address with your own provider. The example below uses Foxmail."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import smtplib, traceback\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.utils import formatdate\n\ndef send_email():\n    server = None\n    try:\n        # ===== Email Content Setup =====\n        msg = MIMEMultipart()\n        msg['From'] = sender_email  # Replace with sender email\n        msg['To'] = recipient_email  # Replace with recipient email\n        msg['Subject'] = email_subject  # Updated subject\n        msg['Date'] = formatdate(localtime=True)  # Add date header\n\n        # Add email body\n        body = MIMEText(email_body, 'plain', 'utf-8')  # Updated content\n        msg.attach(body)\n\n        # ===== Establish SSL Connection =====\n        server = smtplib.SMTP_SSL('smtp.qq.com', 465)  # Replace with SMTP server\n        server.login(sender_email, authorization_code)  # Use authorization code\n\n        # Send email\n        server.sendmail(msg['From'], [msg['To']], msg.as_string())\n        print(\"Email sent successfully\")\n\n    except Exception as e:\n        print(f\"Email sending failed: {e}\")\n        print(\"Exception traceback:\\n\", traceback.format_exc())\n\n    finally:\n        # Safely close connection, ignore quit errors\n        if server:\n            try:\n                server.quit()  # Attempt graceful quit\n            except smtplib.SMTPServerDisconnected:\n                # Server already disconnected, no action needed\n                pass\n            except Exception as e:\n                print(f\"Non-critical error during connection close: {e}\")\n\n# Execute email sending\nsend_email()\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Scraping Node",src:i(6096).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.h4,{id:"5-llm-output-node",children:"5. LLM Output Node"}),"\n",(0,t.jsx)(n.p,{children:"This final node simply displays the generated email body to the user."}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.code,{children:"Predefined Input"})," to:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Output the following content exactly, without including anything else and without any processing:\n{{email_body}}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ensure ",(0,t.jsx)(n.code,{children:"Set As Chatflow AI Response"})," is checked so Chatflow displays the email content properly."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Output Node",src:i(8042).A+"",width:"3024",height:"1964"})}),"\n",(0,t.jsx)(n.h3,{id:"3-running-the-workflow",children:"3. Running the Workflow"}),"\n",(0,t.jsxs)(n.p,{children:["Now click ",(0,t.jsx)(n.strong,{children:"Run"})," to execute your workflow. In the Chatflow input box, enter a command like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Send an email on the theme of 'inspirational'\n"})}),"\n",(0,t.jsx)(n.p,{children:"If everything works correctly, your recipient will receive an inspirational email crafted by LAYRA. May these small automations bring you motivation and energy in your daily learning and work."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Email Screenshot",src:i(9544).A+"",width:"1985",height:"859"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.p,{children:["You have now mastered how to use all node types in your workflows. The final chapter will cover workflow management features including ",(0,t.jsx)(n.strong,{children:"debugging, import/export, and more"}),". You\u2019re almost at the finish line \u2013 keep moving forward!"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Coming Soon"}),": Explore the ",(0,t.jsx)(n.a,{href:"../template-gallery",children:"Template Gallery"})," for prebuilt automation solutions!"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},4041:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/llm-chatflow-fbcb370869d230ccd887c8466a2a6ad0.png"},4356:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/llm-variable-replacement-8ef8f8635bf4030a8090a7b3b59cb31e.png"},5697:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/basic-chatflow-example-60a22d1def0cfff5fcdb0f72d1df4a6a.png"},6096:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-scraping-node-8c43fee3cf26251fdba136e983ece77b.png"},7144:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-global-variable-c6cfea549a6ed7a8570d0150cb9f8080.png"},7923:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/llm-mcp-1425702860327498dccf77d3a901e5a2.png"},8042:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-output-node-45dfc20393b661553f5ccc91ccef70e4.png"},8396:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/basic-chatflow-dc8d9bc7ae25a1f693b82edaff17dff9.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},9003:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/llm-node-7c5b9a3af82d4cbc0aef45a78ee517a1.png"},9376:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-pip-node-a70614d82cbe2ade5fdc1621340e2fd3.png"},9497:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-input-node-d7af35ef1a45d0de96405e702142f5ea.png"},9544:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/email-screenshot-907e8047aa96b8a139a250f9885c495e.png"}}]);